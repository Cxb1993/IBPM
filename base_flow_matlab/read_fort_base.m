function [parms, soln] = read_fort_base( file_start_fort )


% ---- Open file ----------------------------------------------------------
fid = fopen( file_start_fort, 'r');

% ---- Read first line of file --------------------------------------------
temp = fread(fid, 1, 'float32');      % Fortran marker
    m = fread(fid,1,'int');           % cells in x direction
    n = fread(fid,1,'int');           % cells in y direction
    mg = fread(fid,1,'int');          % total number of grid levels
    nb = fread(fid,1,'int');          % total number of body points
temp = fread(fid, 1, 'float32');      % Fortran marker

parms.m = m; parms.n = n; parms.mg = mg; parms.nb = nb;

% ---- Read second line of file -------------------------------------------
temp = fread(fid, 1, 'float32');      % Fortran marker
    parms.Re = fread(fid,1,'real*8' );     % Reynolds number
    parms.dt = fread(fid,1,'real*8' );      % Size of time step
    parms.len = fread(fid,1,'real*8' );     % Size of the smallest grid in the x direction
% Note: 'len' sets the size in the y direction too since the grid spacing is uniform
    parms.offx = fread(fid,1,'real*8' ); % x-distance from lower-right corner smallest grid to origin
    parms.offy = fread(fid,1,'real*8' ); % y-distance of lower-right corner of smallest grid to origin
temp = fread(fid, 1, 'float32');      % Fortran marker


% ---- Compute grid related parameters ------------------------------------

% If we are not considering the smallest grid level, we need to compute the
% grid spacing and x and y offsets for the current grid level. 
%
% Note:  the cells in each grid level are twice as large in both directions
% as the ones of the previous grid level


delta = parms.len / m;
parms.ds = delta * 2;

% % fac = 2^(lev-1);                                        
% % delta = len ./ m *fac;                                  % Grid spacing in both directions for current grid
% % offx = 2^(lev-1) * len/2 - len/2 + offsetx;             % Offset in x direction for current grid
% % offy = 2^(lev-1) * (n*len/m)/2 - (n*len/m)/2 + offsety; % Offset in y direction for current grid

% ---- Read third line of file --------------------------------------------

temp = fread(fid, 1, 'float32');        % Fortran marker

% --> Vorticity
    % Read circulation at grid vertices, for each grid level, and output in (m-1)-by-(n-1) arrays 
    for i = 1:mg                        
        omega(:,:,i) = transpose(reshape(fread(fid, (m-1)*(n-1), 'real*8'), m-1,n-1));
    end
    omega = omega / delta.^2;           % Get the vorticity by dividing the circulation by the cell area
    
% --> Body coordinates and body velocity relative to the grid   
    soln.xb = fread(fid, 2*nb, 'real*8');   % x and y IB coordinates
    vb = fread(fid, 2*nb, 'real*8');    % x and y IB velocities 
    soln.fb = fread(fid, 2*nb, 'real*8'); 
    soln.fb = soln.fb / parms.dt;
    codeb = fread(fid, nb, 'int');   % Read body number corresponding to each body point    
    
% --> Internal Data (probably not useful here)    
    for i = 1:mg
        rhs_old = transpose(reshape(fread(fid, (m-1)*(n-1), 'real*8'), m-1,n-1));
    end
    
% --> Fluxes due to vorticity generated by the body
    % Read x and y components of the fluxes at grid faces, for each grid level, and output in (m+1)-by-(n+1) arrays
    for i = 1:mg                        
        q = fread(fid, (m+1)*(n)+(n+1)*(m), 'real*8');                              % Read fluxes at cell faces        
        qx(:,:,i) = transpose(reshape(q(1:(m+1)*(n)),m+1,n));                       % Put x-comp of fluxes in array
        qy(:,:,i) = transpose(reshape(q((m+1)*(n)+1:(m+1)*(n)+(n+1)*(m)),m,n+1));   % Put y-comp of fluxes in array
    end
    
% --> Fluxes due to potential flow (due to motion of the grid)
    % Read x and y components of the fluxes at grid faces, for each grid level, and output in (m+1)-by-(n+1) arrays
    for i = 1:mg
        q0p = fread(fid, (m+1)*(n)+(n+1)*(m), 'real*8');                             % Read fluxes at cell faces
        qx0p(:,:,i) = transpose(reshape(q0p(1:(m+1)*(n)),m+1,n));                     % Put x-comp of fluxes in array
        qy0p(:,:,i) = transpose(reshape(q0p((m+1)*(n)+1:(m+1)*(n)+(n+1)*(m)),m,n+1)); % Put y-comp of fluxes in array
    end

% --> Fluxes due to rotational flow (due to motion of the grid)
	% Read x and y components of the fluxes at grid faces, for each grid level, and output in (m+1)-by-(n+1) arrays
	for i = 1:mg
		q0r = fread(fid, (m+1)*(n)+(n+1)*(m), 'real*8');                             % Read fluxes at cell faces
		qx0r(:,:,i) = transpose(reshape(q0r(1:(m+1)*(n)),m+1,n));                     % Put x-comp of fluxes in array
		qy0r(:,:,i) = transpose(reshape(q0r((m+1)*(n)+1:(m+1)*(n)+(n+1)*(m)),m,n+1)); % Put y-comp of fluxes in array
	end
temp = fread(fid, 1, 'float32');      % Fortran marker


% ---- Read fourth line of file -------------------------------------------
temp = fread(fid, 1, 'float32');      % Fortran marker

% --> Streamfunction

    for i = 1 : mg
       
        sbig( :, i ) = fread( fid, (m-1) * (n-1), 'real*8' );
        
    end

%     % Read streamfunction at grid vertices, for each grid level, and output in (m-1)-by-(n-1) arrays
%     for i = 1:mg
%         stream(:,:,i) = transpose(reshape(fread(fid, (m-1)*(n-1), 'real*8'), m-1,n-1));
%     end
temp = fread(fid, 1, 'float32');      % Fortran marker

% ---- Read fifth line of file -------------------------------------------
temp = fread(fid, 1, 'float32');      % Fortran marker
	theta = fread(fid,1,'real*8' );   % rotating angle of the frame
	rox = fread(fid,1,'real*8' );     % x-coordinate of the center of rotation
	roy = fread(fid,1,'real*8' );     % y-coordinate of the center of rotation
temp = fread(fid, 1, 'float32');      % Fortran marker

% ---- Read sixth line of file -------------------------------------------
temp = fread(fid, 1, 'float32');      % Fortran marker
    parms.xb0 = fread(fid,2*nb,'real*8' );   % rotating angle of the frame
	soln.chi = fread(fid,3*nb,'real*8' );   % rotating angle of the frame
	soln.zeta = fread(fid,3*nb,'real*8' );     % x-coordinate of the center of rotation
	udd_ib = fread(fid,3*nb,'real*8' );     % y-coordinate of the center of rotation
temp = fread(fid, 1, 'float32');      % Fortran marker

% ---- Read sixth line of file -------------------------------------------
temp = fread(fid, 1, 'float32');      % Fortran marker
    f_rdst = fread(fid,2*nb,'real*8' );   % rotating angle of the frame
temp = fread(fid, 1, 'float32');      % Fortran marker

% ---- Done reading file --------------------------------------------------
fclose(fid);


%Get streamfunction on truncated grid
soln.s = trunc_fort_sfn( sbig, parms );

% %Get vel flux and circulation from stfn
% soln.q = mats.C * soln.s; %get vel flux
% soln.gamma = mats.R * soln.q; %get circulation



