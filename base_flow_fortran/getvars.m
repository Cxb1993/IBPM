function [q, f, uib, udib, uddib] = getvars(it)

% Reads the data file at istep=it, and returns:
%    xb,yb :     The x,y coordinates of each body/actuator point
%    codeb :     A number identifying the body to which belongs each body/actuator point
%    xn,yn :     Coordinates of each grid point (Cartesian grid)
%    un,vn :     Velocity components at each grid point (based on fluxes from code, which are evaluated at cell faces)
%    wn :        Vorticity at grid point (based on circulation from code, which is evaluated at cell vertices)
%    sn :        Streamfunction at each grid point
%    pn :        Pressure at each grid point
%    filename :  Full name and path of the file read
%
%
% Note: The "*.var" files read here have been written to Fortran's 
% unformatted format so in order for these (binary) files to be read, one 
% needs to read several Fortran markers, which are of no interest here.
%
% -------------------------------------------------------------------------

% ---- Open file ----------------------------------------------------------
filename = ['output/ib' num2str(it,'%7.7i') '.var'];
fid = fopen(filename,'r');

% ---- Read first line of file --------------------------------------------
temp = fread(fid, 1, 'float32');      % Fortran marker
    m = fread(fid,1,'int');           % cells in x direction
    n = fread(fid,1,'int');           % cells in y direction
    mg = fread(fid,1,'int');          % total number of grid levels
    nb = fread(fid,1,'int');          % total number of body points
temp = fread(fid, 1, 'float32');      % Fortran marker


% ---- Read second line of file -------------------------------------------
temp = fread(fid, 1, 'float32');      % Fortran marker
    rey = fread(fid,1,'real*8' );     % Reynolds number
    dt = fread(fid,1,'real*8' );      % Size of time step
    len = fread(fid,1,'real*8' );     % Size of the smallest grid in the x direction
% Note: 'len' sets the size in the y direction too since the grid spacing is uniform
    offsetx = fread(fid,1,'real*8' ); % x-distance from lower-right corner smallest grid to origin
    offsety = fread(fid,1,'real*8' ); % y-distance of lower-right corner of smallest grid to origin
temp = fread(fid, 1, 'float32');      % Fortran marker




% ---- Read third line of file --------------------------------------------

temp = fread(fid, 1, 'float32');        % Fortran marker

% --> Vorticity
    % Read circulation at grid vertices, for each grid level, and output in (m-1)-by-(n-1) arrays 
    for i = 1:mg                        
        omega(:,:,i) = transpose(reshape(fread(fid, (m-1)*(n-1), 'real*8'), m-1,n-1));
    end
    
    
% --> Body coordinates and body velocity relative to the grid   
    xyb = fread(fid, 2*nb, 'real*8');   % Read x and y coordinates of each body point
    xb = xyb(1:nb);                     % Create x coordinates vector for body points
    yb = xyb(nb+1:2*nb);                % Create y coordinates vector for body points    
    vb = fread(fid, 2*nb, 'real*8');    % Read x and y components of velocity of each body point
    fb = fread(fid, 2*nb, 'real*8');    % Read x and y components of forces of each body point
    codeb = fread(fid, nb, 'int');   % Read body number corresponding to each body point    
    
% --> Internal Data (probably not useful here)    
    for i = 1:mg
        rhs_old = transpose(reshape(fread(fid, (m-1)*(n-1), 'real*8'), m-1,n-1));
    end
    
% --> Fluxes due to vorticity generated by the body
    % Read x and y components of the fluxes at grid faces, for each grid level, and output in (m+1)-by-(n+1) arrays
    nq = (m+1)*n + (n+1)* m;
    q = zeros(mg * nq,1);
    for i = 1 : mg                        
        q((1 : nq) + (i-1)*nq) = fread(fid, nq, 'real*8');                              % Read fluxes at cell faces 
        
    end
    
% --> Fluxes due to potential flow (due to motion of the grid)
    % Read x and y components of the fluxes at grid faces, for each grid level, and output in (m+1)-by-(n+1) arrays
    for i = 1:mg
        q0p = fread(fid, (m+1)*(n)+(n+1)*(m), 'real*8');                             % Read fluxes at cell faces
        
    end

% --> Fluxes due to rotational flow (due to motion of the grid)
	% Read x and y components of the fluxes at grid faces, for each grid level, and output in (m+1)-by-(n+1) arrays
	for i = 1:mg
		q0r = fread(fid, (m+1)*(n)+(n+1)*(m), 'real*8');                             % Read fluxes at cell faces
		
	end
temp = fread(fid, 1, 'float32');      % Fortran marker


% ---- Read fourth line of file -------------------------------------------
temp = fread(fid, 1, 'float32');      % Fortran marker

% --> Streamfunction
    % Read streamfunction at grid vertices, for each grid level, and output in (m-1)-by-(n-1) arrays
    for i = 1:mg
        stream(:,:,i) = transpose(reshape(fread(fid, (m-1)*(n-1), 'real*8'), m-1,n-1));
    end
temp = fread(fid, 1, 'float32');      % Fortran marker

% ---- Read fifth line of file -------------------------------------------
temp = fread(fid, 1, 'float32');      % Fortran marker
	theta = fread(fid,1,'real*8' );   % rotating angle of the frame
	rox = fread(fid,1,'real*8' );     % x-coordinate of the center of rotation
	roy = fread(fid,1,'real*8' );     % y-coordinate of the center of rotation
temp = fread(fid, 1, 'float32');      % Fortran marker


% ---- Read fifth line of file -------------------------------------------
temp = fread(fid, 1, 'float32');      % Fortran marker
	xb0 = fread(fid,2*nb,'real*8' );   
	uib = fread(fid,3*nb,'real*8' );     
	udib = fread(fid,3*nb,'real*8' );
    uddib = fread(fid,3*nb,'real*8' );
temp = fread(fid, 1, 'float32');      % Fortran marker


% ---- Done reading file --------------------------------------------------
fclose(fid);

% fst = load(['output/total_force_lin_',num2str(it,'%7.7i'),'.dat']);

f = fb/dt;
